name: Create Semantic Version Tag

on:
  workflow_call:
    inputs:
      ubuntu-version:
        required: true
        type: string
      bump-type:
        required: true
        type: string
      GPG-configuration-email:
        required: true
        type: string
      GPG-configuration-name:
        required: true
        type: string
    secrets:
      GPG-key:
        required: true
      GPG-key-ID:
        required: true
    outputs:
      tag:
        description: "The tag created for the current commit."
        value: ${{ jobs.create-semantic-version-tag.outputs.tag }}

jobs:
  create-semantic-version-tag:
    outputs:
        tag: ${{ steps.create-new-version-tag.outputs.tag }}
    permissions:
      contents: write
    if: github.event.pull_request.merged
    runs-on: ${{ inputs.ubuntu-version }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: 'Get Latest Tag'
      id: get-latest-tag
      run: |
        export TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        export BUMP_INDEX=$([ "${{ inputs.bump-type }}" = "major" ] && echo "1" || ([ "${{ inputs.bump-type }}" = "minor" ] && echo "2" || echo "3"))
        echo "bump-index=$BUMP_INDEX" >> $GITHUB_OUTPUT
    - name: 'Increment Version Number'
      id: increment-version-number
      run: |
        export NUMBER_TO_BUMP=$(echo "${{ steps.get-latest-tag.outputs.tag }}" | cut -d "." -f ${{ steps.get-latest-tag.outputs.bump-index }})
        export NEW_VERSION_NUMBER=$(echo $NUMBER_TO_BUMP + 1 | bc)
        export OLD_MAJOR=$(echo "${{ steps.get-latest-tag.outputs.tag }}" | cut -d "." -f 1)
        export OLD_MINOR=$(echo "${{ steps.get-latest-tag.outputs.tag }}" | cut -d "." -f 2)
        export OLD_PATCH=$(echo "${{ steps.get-latest-tag.outputs.tag }}" | cut -d "." -f 3)
        export NEW_MAJOR=$([ "${{ inputs.bump-type }}" = "major" ] && echo "$NEW_VERSION_NUMBER" || echo "$OLD_MAJOR")
        export NEW_MINOR=$([ "${{ inputs.bump-type }}" = "minor" ] && echo "$NEW_VERSION_NUMBER" || echo "$OLD_MINOR")
        export NEW_PATCH=$([ "${{ inputs.bump-type }}" = "patch" ] && echo "$NEW_VERSION_NUMBER" || echo "$OLD_PATCH")
        echo "new-major=$NEW_MAJOR" >> $GITHUB_OUTPUT
        echo "new-minor=$NEW_MINOR" >> $GITHUB_OUTPUT
        echo "new-patch=$NEW_PATCH" >> $GITHUB_OUTPUT
    - name: Import GPG key
      run: echo "$GPG_KEY" | base64 --decode | gpg --batch --import
      env:
        GPG_KEY: ${{ secrets.GPG-key }}
    - name: Setup git
      run: |
        git config --local user.email "${{ inputs.GPG-configuration-email }}"
        git config --local user.name "${{ inputs.GPG-configuration-name }}"
        git config --local user.signingkey "$GPG_KEY_ID"
        git config --local tag.gpgsign true
      env:
        GPG_KEY_ID: ${{ secrets.GPG-key-ID }}
    - name: 'Create New Version Tag'
      id: create-new-version-tag
      run: |
        export NEW_TAG=$(echo "${{ steps.increment-version-number.outputs.new-major }}.${{ steps.increment-version-number.outputs.new-minor }}.${{ steps.increment-version-number.outputs.new-patch }}")
        git tag --annotate $NEW_TAG --sign --message "Generated by GitHub Action : Create Semantic Version Tag"
        echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
        git push --tags
        
    
